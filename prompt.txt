# django_app/core/celery_schedule.py
CELERY_BEAT_SCHEDULE = {
    "task-hello-i-am-periodic-task": {
        "task": "polls.tasks.hello_i_am_periodic_task",
        "schedule": 60.0,  # runs every 60 seconds
        "options": {
            "queue": "high_priority"  # or "default" or "low_priority" depending on which queue you want to use
        },
    },
}
# django_app/core/settings_sentry_sdk.py
import os

import sentry_sdk
from sentry_sdk.integrations.django import DjangoIntegration

SENTRY_DSN = os.environ.get("SENTRY_DSN", None)
assert SENTRY_DSN, "SENTRY_DSN is not set"

sentry_sdk.init(
    dsn=SENTRY_DSN,
    integrations=[DjangoIntegration()],
    # If you wish to associate users to errors (assuming you are using
    # django.contrib.auth) you may enable sending PII data.
    send_default_pii=True,
    # Set traces_sample_rate to 1.0 to capture 100%
    # of transactions for performance monitoring.
    # We recommend adjusting this value in production.
    traces_sample_rate=1.0,
    # To set a uniform sample rate
    # Set profiles_sample_rate to 1.0 to profile 100%
    # of sampled transactions.
    # We recommend adjusting this value in production,
    profiles_sample_rate=1.0,
)
# django_app/core/asgi.py
"""
ASGI config for core project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "core.settings")

application = get_asgi_application()
# core/__init__.py

from .celery import app as celery_app

__all__ = ("celery_app",)
# django_app/core/celery.py
import os

from celery import Celery
from django.conf import settings

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "core.settings")

app = Celery("core")

app.config_from_object("django.conf:settings", namespace="CELERY")

app.autodiscover_tasks(lambda: settings.INSTALLED_APPS)
# django_app/core/settings copy.py
"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 4.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
import os
import sys
from datetime import timedelta
from pathlib import Path
from urllib.parse import urlparse

from . import settings_sentry_sdk  # noqa: F401, for sentry
from .celery_schedule import CELERY_BEAT_SCHEDULE  # noqa: F401, Required for celery beat

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
sys.path.insert(0, os.path.join(BASE_DIR, "apps"))

# -----------------------------------
# CORE CONFIG
# -----------------------------------

SECRET_KEY = os.environ.get("BACKEND_SECRET_KEY", "DJANGO_INSECURE_KEY")
DEBUG = True
ALLOWED_HOSTS = []
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
ROOT_URLCONF = "core.urls"
WSGI_APPLICATION = "core.wsgi.application"

# -----------------------------------
# SECURITY
# -----------------------------------

# CSRF settings
CSRF_TRUSTED_ORIGINS = []

# CORS settings
CORS_ORIGIN_ALLOW_ALL = True
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOWED_ORIGINS = []

# -----------------------------------
# APPLICATIONS AND MIDDLEWARE
# -----------------------------------
INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # third party
    "corsheaders",
    "django_filters",
    "django_celery_beat",
    "django_celery_results",
    "rest_framework",
    "rest_framework_simplejwt",
    # local
]

if DEBUG:
    INSTALLED_APPS += [
        "drf_spectacular",
        "drf_spectacular_sidecar",
        # "debug_toolbar",
        # "silk",
    ]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]
# -----------------------------------
# TEMPLATES
# -----------------------------------

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

# -----------------------------------
# DATABASES
# -----------------------------------
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}


# -----------------------------------
# AUTHENTICATION
# -----------------------------------
AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]
# AUTH_USER_MODEL = "users.User"

# ----------------- CACHING CONFIG ----------------------
REDIS_CACHE_URL = os.environ.get("REDIS_CACHE_URL")
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": REDIS_CACHE_URL,
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        },
    }
}
# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# -----------------------------------
# MEDIA & STATIC
# -----------------------------------

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
# django_app/core/settings.py
"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 4.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
import os
import sys
from pathlib import Path

# from . import settings_sentry_sdk
from .celery_schedule import CELERY_BEAT_SCHEDULE  # enable celery beat # noqa

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
sys.path.insert(0, os.path.join(BASE_DIR, "apps"))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-^h0^sh!7%#lab&j!qiil#di8#@!%q1jrafp*lb7!_ktxyd11hr"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    #
    "django_celery_beat",
    "django_celery_results",
    "rest_framework",
    #
    "polls",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "core.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "core.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True

# media files
MEDIA_URL = "media/"
MEDIA_ROOT = os.path.join(BASE_DIR, "media")

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "static/"
STATIC_ROOT = os.path.join(BASE_DIR, "static")

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# ----------------- CACHING CONFIG ----------------------
REDIS_CACHE_URL = os.environ.get("REDIS_CACHE_URL")
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": REDIS_CACHE_URL,
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        },
    }
}

# ----------------- CELERY CONFIG ----------------------
CELERY_BROKER_URL = os.environ.get("CELERY_BROKER_URL")  # 0 - for cache, 1 - for celery
CELERY_RESULT_BACKEND = os.environ.get("CELERY_RESULT_BACKEND")
CELERY_ACCEPT_CONTENT = ["json"]
CELERY_TASK_SERIALIZER = "json"
CELERY_RESULT_SERIALIZER = "json"
CELERY_TIMEZONE = "UTC"

# ----------------- ASSERT ENV VARS ----------------------
assert REDIS_CACHE_URL, "REDIS_CACHE_URL env var is not set"
assert CELERY_BROKER_URL, "CELERY_BROKER_URL env var is not set"
assert CELERY_RESULT_BACKEND, "CELERY_RESULT_BACKEND env var is not set"
# django_app/core/urls.py
"""
URL configuration for core project.

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/4.2/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""
from core.views import ping_view
from django.contrib import admin
from django.urls import path

urlpatterns = [
    path("admin/", admin.site.urls),
    path("api/ping/", ping_view),
]
# django_app/core/views.py
from django.http import JsonResponse


def ping_view(request):
    return JsonResponse({"status": "ok"})
# django_app/core/wsgi.py
"""
WSGI config for core project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "core.settings")

application = get_wsgi_application()
# django_app/common/caches.py
# warning this file is depenent on django cache

import redis
from common.loggers import logger
from django.core.cache import cache


def get_key_from_cache(key):
    # general logic for the key is url + params
    # add count logic
    return cache.get(key)


def set_key_to_cache(key, value, timeout=None):
    logger.debug(f"Setting {key} to cache with {timeout=}.")
    return cache.set(key, value, timeout)


def get_ttl(key):
    if cache.get(key) is None:
        return f"{key=} does not exist in cache."

    ttl = cache.ttl(key)
    if ttl is None:
        return f"{key=} exists but does not have an expiry."
    else:
        return f"TTL for {key} is {ttl} seconds."


def get_all_redis_keys():
    # Get the raw Redis client from the cache
    redis_client = cache.client.get_client()

    # Use the Redis client to get all keys
    keys = redis_client.keys("*")

    # Return the keys
    return keys


def get_redis_space():
    # Connect to your Redis server
    r = redis.Redis(host="redis-oraclus", port=6379, db=0)

    # Get memory info
    info = r.info("memory")

    memory_limit = info["maxmemory"]
    memory_limit_mb = memory_limit / (1024 * 1024)
    print(f"Memory Limit: {memory_limit_mb:.2f} MB")

    memory_used = info["used_memory"]
    memory_used_mb = memory_used / (1024 * 1024)
    print(f"Used Memory: {memory_used_mb:.2f} MB")

    memory_left = memory_limit - memory_used
    memory_left_mb = memory_left / (1024 * 1024)
    print(f"Memory left: {memory_left_mb:.2f} MB")

    keys = r.keys("*")
    print(f"Number of keys: {len(keys)}")

    avg_key_size = sum(r.memory_usage(key) for key in keys) / len(keys)
    print(f"Avg key size: {avg_key_size:.2f} bytes")

    number_of_more_keys = memory_left // avg_key_size
    print(f"Number of more keys: {number_of_more_keys}")
# django_app/common/loggers.py

import sys

from loguru import logger

# Export the loggers for use in other modules
__all__ = ["logger"]

# Default logger configuration
logger.remove()
logger.add(sys.stderr, level="INFO", enqueue=True)
# logger.add(
#     "/app/logs/app.log",
#     rotation="10 MB",
#     format="{time} {module}.{function}:{line} {level} {message}",
#     level="WARNING",
#     enqueue=True,
#     compression="zip",
# )
# django_app/common/constants.py
YYYYMMDD_FORMAT = "%Y-%m-%d"
YYYYMMDD_HHMMSS_FORMAT = "%Y-%m-%d %H:%M:%S"
YYYYMMDD_HHMMSS_TZ_FORMAT = "%Y-%m-%dT%H:%M:%Sz"
HHMMSS_FORMAT = "%H:%M:%S"
# django_app/common/paginations.py
# django_app/common/utils.py
import sys
from io import BytesIO

from django.core.files.uploadedfile import InMemoryUploadedFile
from PIL import Image


def create_thumbnail(image, size=(300, 300), format="JPEG", quality=85):
    """
    Create a thumbnail of the specified image.

    Args:
        image (FileField/ImageField): The original image.
        size (tuple): The desired thumbnail size.
        format (str): The desired thumbnail format.
        quality (int): The desired quality of the thumbnail.

    Returns:
        InMemoryUploadedFile: The generated thumbnail.
    """
    img = Image.open(image)
    img.thumbnail(size, Image.ANTIALIAS)
    img = img.convert("RGB")

    output = BytesIO()
    img.save(output, format=format, quality=quality)
    output.seek(0)

    thumbnail_name = f"{image.name.split('.')[0]}_thumbnail.{format.lower()}"
    thumbnail = InMemoryUploadedFile(
        output,
        "ImageField",
        thumbnail_name,
        f"image/{format.lower()}",
        sys.getsizeof(output),
        None,
    )

    return thumbnail
# django_app/common/exceptions.py
# django_app/common/loggers_debug.py
# this module is django independent


import sys

from loguru import logger

__all__ = ["logger"]

# Configure the debug logger
logger.remove()
logger.add(sys.stderr, level="DEBUG", enqueue=True)
# django_app/common/decorators.py
import time
from functools import wraps

from common.loggers import logger


def timer_decorator(func):
    def wrapper(*args, **kwargs):
        start_time = time.perf_counter()
        result = func(*args, **kwargs)
        elapsed_time = time.perf_counter() - start_time
        logger.success(f"{func.__name__} took {elapsed_time:.2f} seconds")
        return result

    return wrapper


def timer_decorator_async(func):
    @wraps(func)
    async def wrapper(*args, **kwargs):
        start_time = time.perf_counter()
        result = await func(*args, **kwargs)
        elapsed_time = time.perf_counter() - start_time
        logger.success(f"{func.__name__} took {elapsed_time:.2f} seconds")
        return result

    return wrapper
#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "core.settings")
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == "__main__":
    main()
# django_app/apps/polls/tasks.py
from celery import shared_task
from common.loggers import logger


@shared_task
def hello_i_am_periodic_task():
    logger.warning("Hello, I am a periodic task!")


@shared_task
def hello_i_am_on_demand_no_priority(a, b, c=100):
    logger.error(f"Hello, I am an on-demand NO PRIORITY task! {(a,b,c)=}")


@shared_task(queue="high_priority")
def hello_i_am_on_demand_high_proirity(x, y, z=200):
    logger.success(f"Hello, I am an on-demand HIGH PRIORITY task! {(x,y,z)=}")


def q():
    hello_i_am_on_demand_no_priority.delay(1, 2)
    hello_i_am_on_demand_no_priority.apply_async(args=[3, 4], queue="default")  # works
    hello_i_am_on_demand_high_proirity.delay(5, 6)
    hello_i_am_on_demand_high_proirity.apply_async(args=[7, 8], queue="default")  # works


# from polls.tasks import hello_i_am_on_demand_no_priority, hello_i_am_on_demand_high_proirity, q
# hello_i_am_on_demand_no_priority.delay(1,2,3) # does not work
# hello_i_am_on_demand_no_priority.apply_async(args=[4, 5, 6], queue='default') # works
# hello_i_am_on_demand_high_proirity.delay(7,8) # works
# hello_i_am_on_demand_high_proirity.apply_async(args=[9,10], queue='default') # works
# django_app/apps/polls/models.py
from django.db import models


class Question(models.Model):
    question_text = models.CharField(max_length=200)
    pub_date = models.DateTimeField("date published")

    def __str__(self):
        return self.question_text


class Choice(models.Model):
    question = models.ForeignKey(Question, related_name="choices", on_delete=models.CASCADE)
    choice_text = models.CharField(max_length=200)
    votes = models.IntegerField(default=0)

    def __str__(self):
        return self.choice_text
# django_app/apps/polls/serializers.py
from rest_framework import serializers

from .models import Choice, Question


class ChoiceSerializer(serializers.ModelSerializer):
    class Meta:
        model = Choice
        fields = ("id", "choice_text", "votes")


class QuestionSerializer(serializers.ModelSerializer):
    choices = ChoiceSerializer(many=True, read_only=True)

    class Meta:
        model = Question
        fields = ("id", "question_text", "pub_date", "choices")
# django_app/apps/polls/apps.py
from django.apps import AppConfig


class PollsConfig(AppConfig):
    default_auto_field = "django.db.models.BigAutoField"
    name = "polls"
# django_app/apps/polls/admin.py
# django_app/apps/polls/tests.py
# django_app/apps/polls/urls.py
from django.urls import include, path
from rest_framework.routers import DefaultRouter

from . import views

# Create a router and register our viewsets with it.
router = DefaultRouter()
router.register(r"questions", views.QuestionViewSet)
router.register(r"choices", views.ChoiceViewSet)

# The API URLs are now determined automatically by the router.
urlpatterns = [
    path("", include(router.urls)),
]
# django_app/apps/polls/views.py
from rest_framework import viewsets

from .models import Choice, Question
from .serializers import ChoiceSerializer, QuestionSerializer


class QuestionViewSet(viewsets.ModelViewSet):
    queryset = Question.objects.all().order_by("-pub_date")
    serializer_class = QuestionSerializer


class ChoiceViewSet(viewsets.ModelViewSet):
    queryset = Choice.objects.all()
    serializer_class = ChoiceSerializer
